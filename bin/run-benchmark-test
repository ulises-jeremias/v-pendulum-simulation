#!/usr/bin/env bash

## Copyright (C) 2021 Ulises Jeremias Cornejo Fandos
## Licensed under MIT
##
##     @script.name [OPTION] ARGUMENTS...
##
## Options:
##     -h, --help                            Prints usage and example
##         --times=TIMES                     Number of times to run the benchmark
##         --stats                           Exeute with stats
##         --use-verbose                     Compile in verbose mode
##         --use-autofree                    Execute tests using atofree
##         --use-prod                        Execute tests using prod mode compilation
##         --use-prod                        Execute tests using prod mode compilation
##         --use-gc=GC_STRATEGY              Execute tests using gc
##         --width=WIDTH                     Grid width. 400 by default.
##         --height=HEIGHT                   Grid height. 400 by default.
##         --workers=NUM_WORKERS             Amount of workers to use for parallel simulation. Will use the amount of threads by default.
##         --log-file=LOG_FILE_PATH          Path to the file in which you want to store the logs.
##

ROOT=$(dirname "$0")

source "${ROOT}/util/opts/opts.sh" || exit
source "${ROOT}/util/logs.sh" || exit

set -eo pipefail

slugify() {
    echo "$1" | iconv -c -t ascii//TRANSLIT | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]"
}

run_test() {
    program="$1"
    output_path="$2"
    flags="$3"
    execution_flags="$4"
    log_file="$5"

    describe "Compiling ${program} simulation with flags: \"${flags}\""

    echo &>>"${log_file}"
    echo &>>"${log_file}"

    if v ${flags} "${pensim_dir_path}"/"${program}".v &>>"${log_file}"; then
        log_success "Compilation passed successfully" "" "${log_file}"
    else
        log_failed "Compilation failed" "I" "${log_file}"
    fi

    for i in $(seq 1 ${times}); do
        describe "Executing ${program} simulation with flags \"${execution_flags} --output ${output_path}\""

        echo &>>"${log_file}"
        echo &>>"${log_file}"

        if "${pensim_dir_path}"/"${program}" ${execution_flags} --output "${output_path}" &>>"${log_file}"; then
            log_success "Secuencial Simulation passed successfully" "" "${log_file}"
        else
            log_failed "Secuencial Execution failed" "" "${log_file}"
        fi
    done
}

pensim_dir_path=$(dirname "${ROOT}")

height="${height:-400}"
width="${width:-400}"

flags=""
execution_flags="--width ${width} --height ${height}"

if [[ -n "${use_verbose}" ]]; then
    describe "Running tests in verbose mode"
    flags="${flags} -d verbose"
fi

if [[ -n "${use_autofree}" ]]; then
    describe "Running tests using Autofree"
    flags="${flags} -autofree"
fi

if [[ -n "${use_prod}" ]]; then
    describe "Running tests using prod mode"
    flags="${flags} -prod"
fi

if [[ -n "${stats}" ]]; then
    describe "Running tests with stats"
    flags="${flags} -stats"
fi

log_file=${log_file:-"${pensim_dir_path}/simulation_log_$(slugify "${flags}_${height}x${width}").log"}

[ ! -f "${log_file}" ] && touch "${log_file}"

secuencial_output_path="${pensim_dir_path}/$(slugify "output_${flags}_${height}x${width}").ppm"
parallel_output_path="${pensim_dir_path}/$(slugify "output_${flags}_${height}x${width}_${workers}").ppm"

run_test "secuencial" "${secuencial_output_path}" "${flags}" "${execution_flags}" "${log_file}"

if [[ -n "${use_gc}" ]]; then
    describe "Compiling tests using gc ${use_gc:-boehm}"
    flags="${flags} -gc ${use_gc:-boehm}"
fi

if [[ -n "${workers}" ]]; then
    log_warn "Entered workers amount #${workers}" "" "${log_file}"
    execution_flags="${execution_flags} --workers ${workers}"
fi

run_test "parallel" "${parallel_output_path}" "${flags}" "${execution_flags}" "${log_file}"
run_test "parallel_with_iw" "${parallel_output_path}" "${flags}" "${execution_flags}" "${log_file}"
